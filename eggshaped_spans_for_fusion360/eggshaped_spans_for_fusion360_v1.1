import adsk.core, adsk.fusion, adsk.cam, traceback
import math as m

"""
This skript adds spans calculated by Hügelschäffer equation to Fusion 360 fitting 3 splines ready for lofting.
"""

handlers = []

ui = None
rowNumber = 0

app = adsk.core.Application.get()
if app:
    ui = app.userInterface

product = app.activeProduct
design = adsk.fusion.Design.cast(product)
root = design.rootComponent
sketches = root.sketches
planes = root.constructionPlanes

l_off = []
val_ids_list = []

COMMAND_ID = "SpanCMDDef"
SE01_SELECTION_INPUT_ID = "Spline oben"
SE02_SELECTION_INPUT_ID = "Spline unten"
SE03_SELECTION_INPUT_ID = "Spline mitte"
IN01_VALUE_INPUT_ID = "Abstand bei gleichem Abstand"
SE04_SELECTION_INPUT_ID = "Parallele Ursprungsebene"
IN02_VALUE_INPUT_ID = "Abstand Spanten"
IN03_VALUE_INPUT_ID = "Position erster Spant"
IN04_VALUE_INPUT_ID = "Position letzter Spant"
CH01_BOOLEAN_INPUT_ID = "checkbox"
CH02_BOOLEAN_INPUT_ID = "checkbox2"


# Adds a new row to the table.
def addRowToTable(tableInput):
    global rowNumber, val_ids_list

    cmdInputs = adsk.core.CommandInputs.cast(tableInput.commandInputs)

    valueInput = cmdInputs.addValueInput(
        "TableInput_value{}".format(rowNumber), "Value", "mm", adsk.core.ValueInput.createByReal(0.0)
    )
    val_ids_list.append((f"TableInput_value{rowNumber}", rowNumber, valueInput.value))  # ids to read values later
    row = tableInput.rowCount
    tableInput.addCommandInput(valueInput, row, 0)

    # Increment a counter used to make each row unique.
    rowNumber = rowNumber + 1


# Event handler that reacts to any changes the user makes to any of the command inputs.
class MyCommandInputChangedHandler(adsk.core.InputChangedEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            eventArgs = adsk.core.InputChangedEventArgs.cast(args)
            inputs = eventArgs.inputs
            cmdInput = eventArgs.input

            global abstand, val_ids_list
            if cmdInput.id == IN02_VALUE_INPUT_ID:
                abstand = inputs.itemById(IN02_VALUE_INPUT_ID)

            tableInput = inputs.itemById("table")
            if cmdInput.id == "tableAdd":
                addRowToTable(tableInput)
            elif cmdInput.id == "tableDelete":
                if tableInput.selectedRow == -1:
                    ui.messageBox("Select one row to delete.")
                else:

                    del val_ids_list[int(tableInput.selectedRow)]
                    tableInput.deleteRow(tableInput.selectedRow)

        except:
            ui.messageBox("Failed:\n{}".format(traceback.format_exc()))


class SpanCommandExecuteHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:

            command = args.firingEvent.sender
            inputs = command.commandInputs

            sel0 = inputs.itemById(SE01_SELECTION_INPUT_ID).selection(0)
            sel1 = inputs.itemById(SE02_SELECTION_INPUT_ID).selection(0)
            sel2 = inputs.itemById(SE03_SELECTION_INPUT_ID).selection(0)
            sel3 = inputs.itemById(SE04_SELECTION_INPUT_ID).selection(0)
            input4 = inputs.itemById(IN01_VALUE_INPUT_ID)  # points / 4
            delta_span = float((inputs.itemById(IN02_VALUE_INPUT_ID)).value)  # distance
            anzahl_span = float((inputs.itemById(IN03_VALUE_INPUT_ID).value))  # number of spans

            if inputs.itemById(CH01_BOOLEAN_INPUT_ID) == True:
                faktor = i
                anzahl_span -= 1

            if (inputs.itemById(CH02_BOOLEAN_INPUT_ID)).value == True:
                dir_off = -1
            else:
                dir_off = 1

            for i in range(int(anzahl_span)):
                if (inputs.itemById(CH01_BOOLEAN_INPUT_ID)).value == True:
                    faktor = i
                else:
                    faktor = i + 1
                temp = float(faktor * delta_span)
                l_off.append(dir_off * temp)

            spline_o = sel0.entity
            spline_u = sel1.entity
            spline_m = sel2.entity

            # val_ids_list get rid of dublets add append l_off
            def prepare_val_ids():
                global val_ids_list

                names_ids = [val_ids_list[i][0] for i in range(len(val_ids_list))]
                values = [float(inputs.itemById(names_ids[i]).value) for i in range(len(names_ids))]
                cleaned_vals = list(set(values))
                for i in range(len(cleaned_vals)):
                    l_off.append(float(cleaned_vals[i]) * 10)  # hier faktor wieder

            prepare_val_ids()

            plane = inputs.itemById(SE04_SELECTION_INPUT_ID).selection(0).entity

            offsets = l_off
            offmin = inputs.itemById(IN03_VALUE_INPUT_ID).value
            offmax = inputs.itemById(IN04_VALUE_INPUT_ID).value
            distance = inputs.itemById(IN02_VALUE_INPUT_ID).value

            def calculate_offsets(offmin, offmax, distance):
                if offmax > offmin:
                    while offmin <= offmax:
                        offsets.append(offmin)
                        offmin += distance
                else:
                    while offmin >= offmax:
                        offsets.append(offmin)
                        offmin -= distance

                if offmax not in offsets:
                    offsets.append(offmax)

            if inputs.itemById(CH01_BOOLEAN_INPUT_ID).value == True:
                calculate_offsets(offmin * 10, offmax * 10, distance * 10)

            ento = []
            entu = []
            entm = []
            lineo = spline_o
            ento.append(lineo)
            lineu = spline_u
            entu.append(lineu)
            linem = spline_m
            entm.append(linem)

            num_points = inputs.itemById(IN01_VALUE_INPUT_ID).value

            for i in range(len(offsets)):
                SpanCalc(4 * num_points, ento, entu, entm, offsets[i], plane)

        except:
            if ui:
                ui.messageBox("Failed:\n{}".format(traceback.format_exc()))


class SpanCommandDestroyHandler(adsk.core.CommandEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args):
        try:
            # When the command is done, terminate the script
            # This will release all globals which will remove all event handlers
            adsk.terminate()
        except:
            if ui:
                ui.messageBox("Failed:\n{}".format(traceback.format_exc()))


class SpanCalc:

    def __init__(self, anzahl_punkte, ento, entu, entm, offset_z, plane):

        self.ento = ento
        self.entu = entu
        self.entm = entm
        self.plane = plane
        self.offset_z = offset_z
        self.anzahl_punkte = anzahl_punkte
        self.y_max, self.y_mid, self.y_min, self.x_max, self.sketch, self.casex = self.assign_values()
        self.xwerte = []
        self.ywerte = []
        self.egg = self.calc_egg()

    # calculation of the eggshape around the origin → will be moved later
    def calc_egg(self):

        a = 0.5 * abs(self.y_max - self.y_min)
        b = abs(self.x_max)
        d = self.y_max - self.y_mid - 0.5 * abs(self.y_max - self.y_min)

        # fritz huegel schaeffer calculation depending on the angle
        punkt = 0
        while punkt < self.anzahl_punkte + 1:  # first and last point identical for a closed spline
            kreisteiler = 360 / self.anzahl_punkte
            t = punkt * kreisteiler  # kreisteiler (example: divider of the circle by 5° angles results in 72 points)
            if t == 90:  # avoid errors from rounding at the points the spline cuts the splines from the fusselage
                # shape. Use the original inputs.
                x = self.x_max
            elif t == 270:
                x = -self.x_max
            else:
                x = b * m.sin(m.radians(t))
            self.xwerte.append(x)
            y = (m.sqrt((a**2) - (d**2) * ((m.sin(m.radians(t))) ** 2)) + d * m.cos(m.radians(t))) * m.cos(
                m.radians(t)
            )
            self.ywerte.append(y)
            punkt += 1

        self.move_x()
        self.draw_egg()

    def move_x(self):

        ywerte_offset = []

        offset = self.y_max - self.ywerte[0]

        for w in range(len(self.ywerte)):
            y_new = self.ywerte[w] + offset
            ywerte_offset.append(y_new)

        ywerte_offset[0] = self.y_max
        ywerte_offset[len(self.ywerte) - 1] = self.y_max
        ywerte_offset[int(0.5 * (len(self.ywerte) - 1))] = self.y_min

        self.ywerte = ywerte_offset

    def draw_egg(self):

        coll = adsk.core.ObjectCollection.create()

        if self.casex == 3 or self.casex == 4:
            tempy = list(self.xwerte)
            tempx = list(self.ywerte)
            self.xwerte = tempx
            self.ywerte = tempy

        x = self.xwerte
        y = self.ywerte

        for i in range(len(self.xwerte)):
            point = adsk.core.Point3D.create(x[i], y[i], 0)
            coll.add(point)

        spline = self.sketch.sketchCurves.sketchFittedSplines.add(coll)

    def assign_values(self):  # plane?

        # create offset plane
        app = adsk.core.Application.get()
        ui = app.userInterface

        product = app.activeProduct
        design = adsk.fusion.Design.cast(product)
        root = design.rootComponent
        sketches = root.sketches
        planes = root.constructionPlanes
        planeInput = planes.createInput()
        valueInput = adsk.core.ValueInput.createByReal(self.offset_z * 0.1)
        planeInput.setByOffset(self.plane, valueInput)
        sketchiplane = planes.add(planeInput)

        sketch = sketches.add(sketchiplane)
        sketch.name = "spant bei " + str(self.offset_z) + " mm"
        intero = sketch.intersectWithSketchPlane(self.ento)
        interu = sketch.intersectWithSketchPlane(self.entu)
        inters = sketch.intersectWithSketchPlane(self.entm)

        point_top = intero[0]
        point_bottom = interu[0]
        point_middle = inters[0]

        # find out x or y dir of the sketch
        yDir = point_bottom.geometry.vectorTo(point_top.geometry)
        yDir.normalize()
        yDirI = point_top.geometry.vectorTo(point_bottom.geometry)
        yDirI.normalize()
        zDir = adsk.core.Vector3D.create(0, 0, 1)
        zDirI = adsk.core.Vector3D.create(0, 0, -1)

        if yDir.isEqualTo(sketch.yDirection):
            ymax = point_top.geometry.y
            ymid = point_middle.geometry.y
            ymin = point_bottom.geometry.y
            if point_middle.geometry.x > 0:
                xmax = point_middle.geometry.x
            else:
                xmax = -point_middle.geometry.x
            casex = 1

        elif yDirI.isEqualTo(sketch.yDirection):
            ymax = point_bottom.geometry.y
            ymid = point_middle.geometry.y
            ymin = point_top.geometry.y
            if point_middle.geometry.x > 0:
                xmax = point_middle.geometry.x
            else:
                xmax = -point_middle.geometry.x
            casex = 2

        elif yDir.isEqualTo(sketch.xDirection):
            ymax = point_top.geometry.x
            ymid = point_middle.geometry.x
            ymin = point_bottom.geometry.x

            if point_middle.geometry.x > 0:
                xmax = point_middle.geometry.y
            else:
                xmax = -point_middle.geometry.y
            casex = 3

        elif yDirI.isEqualTo(sketch.xDirection):
            ui.messageBox("xinv")
            ymax = point_bottom.geometry.x
            ymid = point_middle.geometry.x
            ymin = point_top.geometry.x
            if point_middle.geometry.x > 0:
                ui.messageBox("ydir")
                xmax = point_middle.geometry.y
            else:
                ui.messageBox("yinv")
                xmax = -point_middle.geometry.y
            casex = 4

        elif yDir.isPerpendicularTo(zDir) and point_top.geometry.y < point_bottom.geometry.y:
            ymax = point_bottom.geometry.y
            ymid = point_middle.geometry.y
            ymin = point_top.geometry.y
            if point_middle.geometry.x < 0:
                xmax = -point_middle.geometry.x
            else:
                xmax = point_middle.geometry.x
            casex = 5

        elif yDirI.isPerpendicularTo(zDirI) and point_top.geometry.y > point_bottom.geometry.y:
            ymax = point_top.geometry.y
            ymid = point_middle.geometry.y
            ymin = point_bottom.geometry.y
            if point_middle.geometry.x < 0:
                xmax = -point_middle.geometry.x
            else:
                xmax = point_middle.geometry.x
            casex = 6

        return ymax, ymid, ymin, xmax, sketch, casex


class SpanCommandCreatedHandler(adsk.core.CommandCreatedEventHandler):
    def __init__(self):
        super().__init__()

    def notify(self, args: adsk.core.CommandEventArgs):
        try:

            onExecute = SpanCommandExecuteHandler()
            args.command.execute.add(onExecute)
            handlers.append(onExecute)

            onDestroy = SpanCommandDestroyHandler()
            args.command.destroy.add(onDestroy)
            handlers.append(onDestroy)

            onInputChanged = MyCommandInputChangedHandler()
            args.command.inputChanged.add(onInputChanged)
            handlers.append(onInputChanged)

            inputs = args.command.commandInputs

            tabCmdInput1 = inputs.addTabCommandInput("tab_1", "Settings")
            tab1ChildInputs = tabCmdInput1.children

            groupCmdInput = tab1ChildInputs.addGroupCommandInput("group", "Auswahl der Splines und Projektionsebene:")
            groupCmdInput.isExpanded = True
            groupCmdInput.isEnabledCheckBoxDisplayed = False
            groupChildInputs = groupCmdInput.children

            group2CmdInput = tab1ChildInputs.addGroupCommandInput("group2", "Eiform Punkte pro Quadrant:")
            group2CmdInput.isExpanded = True
            group2CmdInput.isEnabledCheckBoxDisplayed = False
            group2ChildInputs = group2CmdInput.children

            group3CmdInput = tab1ChildInputs.addGroupCommandInput("group3", "Spanten gleichen Abstands erzeugen:")
            group3CmdInput.isExpanded = True
            group3CmdInput.isEnabledCheckBoxDisplayed = False
            group3ChildInputs = group3CmdInput.children

            group4CmdInput = tab1ChildInputs.addGroupCommandInput(
                "group3", "Spanten unterschiedlichen Abstands zur Usrprungsebene erzeugen:"
            )
            group4CmdInput.isExpanded = True
            group4CmdInput.isEnabledCheckBoxDisplayed = False
            group4ChildInputs = group4CmdInput.children

            i1 = groupChildInputs.addSelectionInput(SE01_SELECTION_INPUT_ID, SE01_SELECTION_INPUT_ID, "Select curve")

            i1.addSelectionFilter(adsk.core.SelectionCommandInput.SketchCurves)
            i1.addSelectionFilter(adsk.core.SelectionCommandInput.RootComponents)
            i2 = groupChildInputs.addSelectionInput(SE02_SELECTION_INPUT_ID, SE02_SELECTION_INPUT_ID, "Select curve")
            i2.addSelectionFilter(adsk.core.SelectionCommandInput.SketchCurves)
            # i2.addSelectionFilter(adsk.core.SelectionCommandInput.RootComponents)
            i3 = groupChildInputs.addSelectionInput(SE03_SELECTION_INPUT_ID, SE03_SELECTION_INPUT_ID, "Select curve")
            i3.addSelectionFilter(adsk.core.SelectionCommandInput.SketchCurves)
            # i3.addSelectionFilter(adsk.core.SelectionCommandInput.RootComponents)
            i4 = group2ChildInputs.addValueInput(
                IN01_VALUE_INPUT_ID, "1/4 Punkte Eiform", "", adsk.core.ValueInput.createByString("9")
            )
            i5 = groupChildInputs.addSelectionInput(SE04_SELECTION_INPUT_ID, SE04_SELECTION_INPUT_ID, "Select Plane")
            i5.addSelectionFilter(adsk.core.SelectionCommandInput.ConstructionPlanes)
            # i5.addSelectionFilter(adsk.core.SelectionCommandInput.RootComponents)
            
            i8 = group3ChildInputs.addBoolValueInput(
                CH01_BOOLEAN_INPUT_ID, "Spanten gleichen Abstands erstellen", True, "", False
            )
            i6 = group3ChildInputs.addValueInput(
                IN02_VALUE_INPUT_ID, IN02_VALUE_INPUT_ID, "mm", adsk.core.ValueInput.createByReal(0.5)
            )
            i7 = group3ChildInputs.addValueInput(
                IN03_VALUE_INPUT_ID, IN03_VALUE_INPUT_ID, "mm", adsk.core.ValueInput.createByString("0")
            )
            i7b = group3ChildInputs.addValueInput(
                IN04_VALUE_INPUT_ID, IN04_VALUE_INPUT_ID, "mm", adsk.core.ValueInput.createByString("100")
            )

            i9 = group3ChildInputs.addBoolValueInput(CH02_BOOLEAN_INPUT_ID, "Richtung invertieren", True, "", False)
            i9.isVisible = False

            tableInput = group4ChildInputs.addTableCommandInput("table", "Table", 1, "1:0:0")
            addRowToTable(tableInput)

            # Add inputs into the table.
            addButtonInput = tab1ChildInputs.addBoolValueInput("tableAdd", "Add", False, "", True)
            tableInput.addToolbarCommandInput(addButtonInput)
            deleteButtonInput = tab1ChildInputs.addBoolValueInput("tableDelete", "Delete", False, "", True)
            tableInput.addToolbarCommandInput(deleteButtonInput)

            tabCmdInput2 = inputs.addTabCommandInput("tab_2", "Help")
            tab2ChildInputs = tabCmdInput2.children

            inst_text1 = """ <p><strong>Instructions:</strong></p> \
                <p>Select rails from side and topview of the fusselage.\
                <p>Select the origin plane from which the offset planes are generated.</p> \
                <p>Either choose to create spans of equal distance or manually add offsets to the table</p> \
                <p>If fussellage is drawn in z-direction (sideview on yZ-plane), top view should be drawn on xZ-plane (and projected to a surface). x-values should be positive.</p>
                <p>Other orientations might cause errors. In these cases it might help to use the mirror side of the top view. Other orientations that work are:</p>
                <p>Fusellage on x-axis topview with pos y-values, sideview on xZ-plane, top with pos z-values</p>
                <p>Fusselage on y-axis topview with pos x-values, sideview on yZ-plane, top with pos z-values</p>


                
            """
            tab2ChildInputs.addTextBoxCommandInput("fullWidth_textBox", "", inst_text1, 12, True)

        except:
            if ui:
                ui.messageBox("Failed:\n{}".format(traceback.format_exc()))


def run(context):
    try:
        global app, ui
        app = adsk.core.Application.get()
        ui = app.userInterface

        title = "Hügelschäffer Spans"

        if not design:
            ui.messageBox("No active Fusion design", title)
            return

        commandDefinitions = ui.commandDefinitions

        # Get the existing command definition or create it if it doesn't already exist.
        cmdDef = commandDefinitions.itemById(COMMAND_ID)
        if not cmdDef:
            cmdDef = commandDefinitions.addButtonDefinition(
                COMMAND_ID, "Span Parameters", "Creates span spline on selected construction plane"
            )

        # Connect to the command created event.
        onCommandCreated = SpanCommandCreatedHandler()
        cmdDef.commandCreated.add(onCommandCreated)
        handlers.append(onCommandCreated)

        # Execute the command definition.
        inputs = adsk.core.NamedValues.create()  ##### ?
        cmdDef.execute(inputs)

        # Prevent this module from being terminated when the script returns, because we are waiting for event handlers to fire.
        adsk.autoTerminate(False)
    except:
        if ui:
            ui.messageBox("Failed:\n{}".format(traceback.format_exc()))
